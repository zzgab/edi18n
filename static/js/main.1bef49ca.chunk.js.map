{"version":3,"sources":["components/Entry/Entry.tsx","components/Button/Button.tsx","components/FilesBar/FilesBar.tsx","utils/fetchLangs.ts","App.tsx","reportWebVitals.ts","index.tsx","components/Entry/Entry.module.scss","components/FilesBar/FilesBar.module.scss"],"names":["Entry","props","useState","focus","setFocus","className","classNames","classes","Row","Focused","Incomplete","code","langs","isIncompleteLine","TranslationKey","src","Icon","alt","onClick","onRemove","tkey","TranslationKeyText","Object","keys","map","id","Textarea","NotFirst","first","lang","onChange","evt","target","value","onFocus","onBlur","Button","WhichKeys","text","FilesBar","changeFilter","checked","onChangeFilter","All","data-testid","TranslationKeyFiller","type","name","which","files","i","Language","removeLanguage","onDownload","url","prompt","addFile","LangFile","dict","this","matches","match","extractLangName","fetchFile","a","fetch","response","json","getLanguagesFromStorage","persistedLangsStr","localStorage","getItem","JSON","parse","loadFile","App","setFiles","whichKeys","setWhichKeys","useEffect","loadedFiles","langFile","newSet","persist","setItem","stringify","storedLangs","newFiles","assign","blob","Blob","saveAs","downloadLanguage","filter","dicts","key","textarea","document","getElementById","activeElement","isIncomplete","sort","mergeKeys","val","changeValue","k","removeKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.1bef49ca.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport classes from \"./Entry.module.scss\";\nimport classNames from \"classnames\";\nimport Button from \"../Button/Button\";\n\ninterface Props {\n    tkey: string;\n    langs: {[lang: string]: string};\n    first: boolean;\n    onChange(english: string, french: string): void;\n    onRemove(key: string): void;\n}\n\nfunction Entry(props: Props) {\n\n    const [focus, setFocus] = useState(false);\n\n    const isIncomplete = (lang: string) => !props.langs[lang];\n    const isIncompleteLine = () => {\n        for (let code in props.langs) {\n            if (! props.langs[code]) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    return (\n        <div className={classNames(classes.Row, {[classes.Focused]: focus, [classes.Incomplete]: isIncompleteLine()})}>\n\n            <div className={classes.TranslationKey}>\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/223/223499.svg\"\n                    className={classes.Icon}\n                    alt=\"Garbage\"\n                    onClick={() => props.onRemove(props.tkey)} />\n                <span className={classes.TranslationKeyText}>{props.tkey}</span>\n            </div>\n\n            {Object.keys(props.langs).map(code => (\n                <textarea \n                    id={`textarea_${code}_${props.tkey}`}\n                    key={code}\n                    className={classNames(classes.Textarea, {[classes.NotFirst]: !props.first}, {[classes.Incomplete]: isIncomplete(code)})}\n                    onChange={evt => props.onChange(code, evt.target.value)}\n                    value={props.langs[code]}\n                    onFocus={() => setFocus(true)}\n                    onBlur={() => setFocus(false)}\n                ></textarea>\n            ))}\n\n        </div>\n    );\n}\n\nexport default Entry;\n","import React from \"react\";\n\ninterface Props {\n    text: string;\n    onClick(): void;\n}\n\nfunction Button(props: Props) {\n    return (\n        <button onClick={props.onClick}>{props.text}</button>\n    );\n}\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"../Button/Button\";\nimport classes from \"./FilesBar.module.scss\";\n\nexport enum WhichKeys {\n    All,\n    Incomplete\n}\n\ninterface Props {\n    files: string[];\n    addFile(url: string): void;\n    removeLanguage(lang: string): void;\n    onDownload(lang: string): void;\n    which: WhichKeys;\n    onChangeFilter(filter: WhichKeys): void;\n}\n\nexport function FilesBar(props: Props) {\n    const addFile = () => {\n        const url = prompt(\"Paste the URL of the Raw GitHub file:\");\n        if (url) {\n            props.addFile(url);\n        }\n    };\n\n    function changeFilter(evt:any) {\n        if (evt.target.checked) {\n            props.onChangeFilter(evt.target.value === \"all\" ? WhichKeys.All : WhichKeys.Incomplete);\n        }\n    }\n\n    return (\n        <div className={classes.Row} data-testid=\"filesbar\">\n            <div className={classes.TranslationKeyFiller}>\n                <input type=\"radio\" name=\"whichkeys\" \n                    value=\"all\" checked={props.which === WhichKeys.All}\n                    onChange={(evt) => changeFilter(evt)}\n                    /> All\n                <input type=\"radio\" name=\"whichkeys\" value=\"incomplete\" checked={props.which === WhichKeys.Incomplete}\n                    onChange={(evt) => changeFilter(evt)}\n                    /> Incomplete\n            </div>\n\n            {props.files.map((lang, i) => {\n                return (\n                    <div className={classes.Language} key={i}>\n                        {lang}\n\n                        <img src=\"https://www.flaticon.com/svg/static/icons/svg/223/223499.svg\"\n                            className={classes.Icon}\n                            alt=\"Garbage\"\n                            onClick={() => props.removeLanguage(lang)} />\n\n                        <Button text=\"download\" onClick={() => props.onDownload(lang)} />\n                    </div>\n                );\n            })}\n\n            <div className={classes.Language}>\n                <Button text=\"Add File\"\n                        onClick={() => addFile()}/>\n            </div>\n        </div>\n    );\n}\n","export type Dict = {[k: string]: string};\n\nexport class LangFile {\n    public lang: string;\n    constructor(\n        public url: string,\n        public dict: Dict\n    ) {\n        this.lang = extractLangName(url);\n    }\n}\n\nexport async function fetchFile(url: string): Promise<Dict> {\n    const response = await fetch(url);\n    return response.json();\n}\n\nexport function extractLangName(url: string): string {\n    const matches = url.match(/([^\\\\/]+)\\.json\\??.*$/);\n    return (matches && matches[1]) || \"\";\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Entry from './components/Entry/Entry';\nimport { WhichKeys, FilesBar } from './components/FilesBar/FilesBar';\nimport { fetchFile, LangFile } from './utils/fetchLangs';\nimport { saveAs } from 'file-saver';\n\nfunction getLanguagesFromStorage(): {[lang: string]: boolean} {\n  const persistedLangsStr: string = localStorage.getItem(\"files\") || '{}';\n  const languageSet: {[lang: string]: boolean} = JSON.parse(persistedLangsStr);\n  return languageSet;\n}\n\nconst restoreUrllist = (): string[] => {\n  return Object.keys(getLanguagesFromStorage());\n};\n\nconst loadFile = async (url: string) => {\n  const dict = await fetchFile(url);\n  return new LangFile(url, dict);\n};\n\nfunction App() {\n\n  const [files, setFiles] = useState({} as {[code: string]: LangFile});\n  const [whichKeys, setWhichKeys] = useState(WhichKeys.All);\n\n  function isIncomplete(key: string) {\n    for (let lang of Object.keys(files)) {\n      const textarea = document.getElementById(`textarea_${lang}_${key}`);\n      if (document.activeElement === textarea) {\n        return true;\n      }\n      if (! files[lang].dict[key]) {\n          return true;\n      }\n    }\n    return false;\n  }\n\n  const mergeKeys = () => {\n    const dicts = Object.keys(files).map(lang => files[lang].dict);\n\n    return Object.keys(\n      Object.assign({}, ...dicts)\n    ).filter(key => whichKeys === WhichKeys.All || isIncomplete(key))\n     .sort();\n  };\n\n  function downloadLanguage(lang: string): void {\n    const blob = new Blob([JSON.stringify(files[lang].dict, null, 2)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, `${lang}.json`);\n  }\n\n  useEffect(() => {\n    // https://stackoverflow.com/questions/18126559/how-can-i-download-a-single-raw-file-from-a-private-github-repo-using-the-comman\n    // https://gist.github.com/madrobby/9476733\n    (async function () {\n      const loadedFiles = {} as {[code: string]: LangFile};\n      for (let url of restoreUrllist()) {\n        const langFile = await loadFile(url);\n        loadedFiles[langFile.lang] = langFile;\n      }\n\n      setFiles(loadedFiles);\n    }) ();\n  }, []);\n\n  const changeValue = (key: string, lang: string, val: string) => {\n    const newFiles = Object.assign({}, files);\n    newFiles[lang].dict[key] = val;\n    setFiles(newFiles);\n  }\n\n  function removeKey(key: string) {\n    const newFiles = Object.assign({}, files);\n    for (let lang in newFiles) {\n      delete newFiles[lang].dict[key];\n    }\n    setFiles(newFiles);\n  }\n\n  const addFile = async (url: string) => {\n    const newSet = getLanguagesFromStorage();\n    newSet[url] = true;\n    persist(newSet);\n\n    const langFile = await loadFile(url);\n    setFiles({...files, [langFile.lang]: langFile});\n  };\n\n  function persist(langs: {[lang: string]: boolean}) {\n    localStorage.setItem(\"files\", JSON.stringify(langs));\n  }\n\n  const removeLanguage = (lang: string) => {\n    const url = files && files[lang] && files[lang].url;\n    if (!url) {\n      return;\n    }\n\n    const storedLangs = getLanguagesFromStorage();\n    delete storedLangs[url];\n    persist(storedLangs);\n    const newFiles = Object.assign({}, files);\n    delete newFiles[lang];\n    setFiles(newFiles);\n  };\n\n  function onChangeFilter(filter: WhichKeys) {\n    setWhichKeys(filter);\n  }\n\n  return (\n    <div className=\"App\">\n      <FilesBar \n        files={Object.keys(files)} \n        addFile={url => addFile(url)}\n        removeLanguage={lang => removeLanguage(lang)}\n        onDownload={lang => downloadLanguage(lang)}\n        which={whichKeys}\n        onChangeFilter={filter => onChangeFilter(filter)}\n        />\n      {mergeKeys().map((key: string, i: number) => (\n        <Entry key={key} \n               tkey={key} \n               langs={Object.assign({}, ...Object.keys(files).map(lang => ({[lang]: files[lang].dict[key]})))}\n               first={i === 0}\n               onChange={(lang, val) => changeValue(key, lang, val)}\n               onRemove={k => removeKey(k)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"Entry_Row__MfaYe\",\"Focused\":\"Entry_Focused__176ko\",\"Icon\":\"Entry_Icon__BAIgw\",\"TranslationKey\":\"Entry_TranslationKey__16BpX\",\"Incomplete\":\"Entry_Incomplete__Q4kG3\",\"Textarea\":\"Entry_Textarea__3WlWw\",\"Secondary\":\"Entry_Secondary__xY6Xx\",\"NotFirst\":\"Entry_NotFirst__2w66d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"FilesBar_Row__34o4i\",\"TranslationKeyFiller\":\"FilesBar_TranslationKeyFiller__2PJ6O\",\"Language\":\"FilesBar_Language__2kMh8\",\"Icon\":\"FilesBar_Icon__2_5dd\"};"],"sourceRoot":""}